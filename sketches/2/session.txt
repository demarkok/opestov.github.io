(load-file "game.cljs")
(load-file "css.cljs")

(ns o8v.game)

(defn run-app
  "Runs application in the given element."
 [app-class]
 (let [state (atom {:on true :model new-game})
        queue (atom '())]
   (letfn [(enqueue [msg] (swap! queue conj msg))
            (dequeue []
              (loop [x @queue]
                (if (compare-and-set! queue x '())
                  (reverse x)
                  (recur @queue))))
            (stop [timer-id]
              (fn []
                (js/clearInterval timer-id)
                (swap! state assoc :on false)))
            (main []
              (let [q (dequeue) m (reduce handle (:model @state) q)]
                (when (not= m (:model @state))
                  (swap! state assoc :model m)
                  (render app-class m enqueue)))
              (when (:on @state)
                (js/setTimeout main 100)))]
    (render app-class (:model @state) enqueue)
    (main)
    [(stop (js/setInterval (fn [] (enqueue {:tag "tick"})) 1000))
      state queue enqueue dequeue])))


(do 
(def x (run-app "hatapp"))
(def state (x 1))
(def queue (x 2))
(def enqueue (x 3))
(def dequeue (x 4))
(def stop (x 0))
)
(stop)

(def new-game
{
:return-words? true, :cards-in-hands 2, :personal? true, :explanation-tl 20,
:pair ["Alice" "Petya"],
:history {1 {:pair ["Alice" "Bob"], :ac '("orange" "pear"), :rj '(), :hat '("grape" "apple")}, 2 {:pair ["Bob" "Petya"], :ac nil, :rj '(), :hat ["kiwi" "cherry"]}, 3 {:pair ["Petya" "Vasya"], :ac '("kiwi"), :rj '(), :hat '("apple" "cherry")}, 4 {:pair ["Vasya" "Alice"], :ac '("grape" "cherry"), :rj '(), :hat '("apple")}}
:node "transition", :hat #{"apple"}, :guess-tl 3,
:players ["Alice" "Bob" "Petya" "Vasya"], :step 4}
)


z
(def z (js/document.createElement "audio"))
(.setAttribute z "src" "http://www.soundjay.com/button/beep-07.wav")
(.play z)
(def y z.play)
(y)

    <audio id="play" src="http://www.soundjay.com/button/beep-07.wav"></audio>

(.play (js/document.getElementById "play"))

(enqueue {:tag "tick"})
(enqueue {:tag "back-from-lastround"})
(enqueue "step3")

@queue
@state



(require-macros '[cljs.repl :refer [doc source]])
(require-macros '[cljs.test :refer [deftest is run-tests testing]])
(cljs.test/run-tests)

